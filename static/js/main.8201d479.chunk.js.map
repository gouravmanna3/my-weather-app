{"version":3,"sources":["features/weather/weatherIcon.js","features/searchCityWeather/index.js","assets/images/logo.gif","features/weather/cityNotFound.js","reducer/reducer.js","features/weatherSlice.js","features/weather/index.js","App.js","reportWebVitals.js","index.js"],"names":["WeatherIcon","props","iconData","className","main","fIcon","faCloudShowersHeavy","faCloud","faCloudRain","faSnowflake","faSun","faSmog","icon","SearchCity","weatherContext","useContext","WeatherContext","city","dispatch","cityWeather","Form","onSubmit","FormGroup","Input","type","name","value","placeholder","onChange","e","payload","target","CityNotFound","faSearchLocation","initialState","weatherData","weatherDataApiStatus","forecastData","reducer","state","action","getCityWeather","a","axios","get","process","response","getCurrentLocationWeather","coordinates","lat","long","React","createContext","Weather","useState","setCoordinates","useReducer","callApi","useCallback","then","res","data","catch","err","useEffect","navigator","geolocation","getCurrentPosition","position","prevState","coords","latitude","longitude","weather","Navbar","color","full","light","expand","NavbarBrand","href","src","logo","alt","Provider","preventDefault","height","width","faMapMarkerAlt","sys","country","moment","format","description","parseInt","temp","temp_min","wind","speed","humidity","temp_max","Date","sunrise","toLocaleTimeString","hour","minute","sunset","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8201d479.chunk.js","sourcesContent":["import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faCloud,\n  faCloudRain,\n  faCloudShowersHeavy,\n  faSnowflake,\n  faSun,\n  faSmog,\n} from '@fortawesome/free-solid-svg-icons';\n\nimport './weather.css';\n\nconst WeatherIcon = (props) => {\n  const { iconData, className } = props;\n  const main = iconData?.main;\n  let fIcon = null;\n\n  if(main === 'Rain') {\n    fIcon = faCloudShowersHeavy;\n  } else if (main === 'Clouds') {\n    fIcon = faCloud;\n  } else if (main === 'Drizzle') {\n    fIcon = faCloudRain;\n  } else if (main === 'Snow') {\n    fIcon = faSnowflake;\n  } else if (main === 'Clear') {\n    fIcon = faSun;\n  } else {\n    fIcon = faSmog;\n  }\n\n  return (\n    <span className={className}>\n      <FontAwesomeIcon icon={fIcon} />\n    </span>\n  )\n}\n\nexport default WeatherIcon;","import React, { useContext } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Form, FormGroup, Input } from 'reactstrap';\nimport { WeatherContext } from '../weather/index';\n\nimport './search.css';\n\nconst SearchCity = () => {\n\n  const weatherContext = useContext(WeatherContext);\n  const { city, dispatch, cityWeather } = weatherContext;\n\n\n  const onChange = (e) => {\n    dispatch({type: 'SET_CITY', payload: e.target.value });\n  }\n\n  return (\n    <div className=\"searchContainer\">\n      <h2 className=\"searchCityLabel\">Search City</h2>\n      <Form className=\"searchForm\" onSubmit={cityWeather}>\n        <FormGroup>\n          <Input\n            type=\"text\" \n            name=\"city\"\n            value={city}\n            placeholder=\"Enter city\" \n            className=\"searchInput\" \n            onChange={onChange}\n          />\n        </FormGroup>\n      </Form>\n    </div>\n  )\n}\n\nexport default SearchCity;","export default __webpack_public_path__ + \"static/media/logo.02dac759.gif\";","import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearchLocation } from '@fortawesome/free-solid-svg-icons';\n\nconst CityNotFound = () => {\n  return (\n    <div className=\"errorContainer\">\n        <FontAwesomeIcon className=\"searchIcon\" icon={faSearchLocation} />\n        <h2>city not found &#x1F614;</h2>    \n    </div>\n  )\n}\n\nexport default CityNotFound;","export const initialState = {\n  city: '',\n  weatherData: [],\n  weatherDataApiStatus: 'notStarted',\n  forecastData: []\n};\n\nexport const reducer = (state, action) => {\n  switch(action.type) {\n    case 'SET_CITY':\n      return {\n        ...state, city: action.payload\n      };\n    case 'SET_WEATHER_DATA':\n      return {\n        ...state, weatherData: action.payload\n      }\n    case 'SET_FORECAST_DATA':\n      return {\n        ...state, forecastData: action.payload\n      }\n    case 'SET_WEATHER_DATA_API_STATUS':\n      return {\n        ...state, weatherDataApiStatus: action.payload\n    }\n    default:\n      return state;\n  }\n}","import axios from 'axios';\n\nexport const getCityWeather = async (city) => {\n  const response = await axios.get(`${process.env.REACT_APP_API_URL}/weather?q=${city}&units=metric&appid=${process.env.REACT_APP_API_KEY}`)\n  return response;\n}\n\nexport const getCurrentLocationWeather = async (coordinates) => {\n  const response = await axios.get(`${process.env.REACT_APP_API_URL}/weather/?lat=${coordinates.lat}&lon=${coordinates.long}&units=metric&cnt=10&APPID=${process.env.REACT_APP_API_KEY}`)\n  return response;\n}","import React, { useState, useEffect, useReducer, useCallback } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faMapMarkerAlt } from '@fortawesome/free-solid-svg-icons';\nimport Loader from \"react-loader-spinner\";\nimport WeatherIcon from './weatherIcon';\nimport SearchCity from '../searchCityWeather/index';\nimport moment from 'moment';\nimport { Navbar, NavbarBrand } from 'reactstrap';\nimport logo from '../../assets/images/logo.gif';\nimport CityNotFound from './cityNotFound';\nimport { reducer, initialState } from '../../reducer/reducer';\nimport  { getCityWeather, getCurrentLocationWeather } from '../weatherSlice';\n\nimport './weather.css';\n\nexport const WeatherContext = React.createContext();\n\nconst Weather = () => {\n  const [coordinates,  setCoordinates] = useState({\n    lat: '',\n    long: ''\n  });\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const fetchData = () => {\n    navigator.geolocation.getCurrentPosition((position) => {\n      setCoordinates(prevState => ({\n          ...prevState,\n          lat: position.coords.latitude,\n          long: position.coords.longitude\n        })\n      )\n    });\n  }\n\n  const callApi = useCallback(() => {\n    dispatch({type: 'SET_WEATHER_DATA_API_STATUS', payload: 'inProgress'})\n    getCurrentLocationWeather(coordinates)\n    .then(res => {\n      dispatch({type: 'SET_WEATHER_DATA', payload: res.data})\n      dispatch({type: 'SET_WEATHER_DATA_API_STATUS', payload: 'found'})\n    })\n    .catch(err => {\n      dispatch({type: 'SET_WEATHER_DATA_API_STATUS', payload: 'error'})\n    })\n  },[coordinates.lat, coordinates.long])\n\n  const cityWeather = (e) => {\n    e.preventDefault();\n    dispatch({type: 'SET_WEATHER_DATA_API_STATUS', payload: 'inProgress'});\n    const { city } = state;\n    getCityWeather(city)\n    .then(response => {\n      dispatch({type: 'SET_WEATHER_DATA', payload: response.data});\n      dispatch({type: 'SET_WEATHER_DATA_API_STATUS', payload: 'found'})\n    })\n    .catch(err => {\n      dispatch({type: 'SET_WEATHER_DATA_API_STATUS', payload: 'error'})\n    })\n  }\n\n  useEffect(() => {\n    fetchData();\n    if(coordinates.lat && coordinates.long) {\n      callApi();\n    }\n  },[coordinates.lat, coordinates.long]);\n\n  const { weatherData, weatherDataApiStatus } = state;\n  // const { forecastData } = state;\n  const iconData = weatherData?.weather ? weatherData?.weather[0] : {};\n  return (\n    <main>\n      <Navbar className=\"container-fluid\" color=\"transparent\" full={true} light expand=\"md\">\n        <NavbarBrand className=\"brandText\" href=\"/\">\n          My Weather App\n          <img src={logo} alt=\"logo\" className=\"brandImg\"/>\n        </NavbarBrand>\n      </Navbar>\n      <WeatherContext.Provider value={{ state, dispatch, cityWeather }}>\n        <SearchCity />\n      </WeatherContext.Provider>\n      { weatherDataApiStatus === 'inProgress' || weatherDataApiStatus === 'notStarted' ?\n          <div className=\"loading\">\n            <Loader\n              type=\"TailSpin\"\n              color=\"#FFF\"\n              height={100}\n              width={100}\n            />\n          </div>\n           : weatherDataApiStatus === 'error' ? \n              <CityNotFound />\n           :\n          <div className=\"weather-container\">\n            <article className=\"header\">\n              <FontAwesomeIcon icon={faMapMarkerAlt} className=\"locationIcon\"/>\n              <span> {weatherData?.name}, {weatherData?.sys?.country}</span>\n              <h4>{moment().format('dddd MMMM Do, YYYY')}</h4>\n            </article>\n            \n            <section className=\"weather\">\n              <article className=\"desc\">\n                <WeatherIcon  iconData={iconData} className='icon'/>\n                <span className=\"descText\">{ weatherData?.weather ? weatherData?.weather[0].description : ''}</span>\n              </article>\n              <article className=\"temp\">\n                <span>{parseInt(weatherData.main?.temp)}&deg;c</span>\n              </article>\n              <article className=\"detailsContainer\">\n                <article>\n                  <h4>{parseInt(weatherData?.main?.temp_min)}&deg;c</h4>\n                  <span>Low</span>\n                </article>\n                <article>\n                  <h4>{weatherData?.wind?.speed} m/s</h4>\n                  <span>Wind</span>\n                </article>\n                <article>\n                  <h4>{weatherData.main?.humidity}%</h4>\n                  <span>Humidity</span>\n                </article>\n                <article>\n                  <h4>{parseInt(weatherData?.main?.temp_max)}&deg;c</h4>\n                  <span>High</span>\n                </article>\n                <article>\n                  <h4>{new Date(weatherData?.sys?.sunrise*1000).toLocaleTimeString('en-IN',{hour: '2-digit', minute:'2-digit'})}</h4>\n                  <span>Sunrise</span>\n                </article>\n                <article>\n                  <h4>{new Date(weatherData?.sys?.sunset*1000).toLocaleTimeString('en-IN',{hour: '2-digit', minute:'2-digit'})}</h4>\n                  <span>Sunset</span>\n                </article>\n              </article>\n            </section>\n          </div>\n        } \n      {/* <WeatherContext.Provider value={{forecastData}}>\n        <Forecast />\n      </WeatherContext.Provider> */}\n    </main>\n  )\n}\n\nexport default Weather;","import React from 'react';\nimport Weather from './features/weather/index';\n\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Weather />\n      <footer>\n        Developed by Gourav &#10084; Buy me a  \n        <a href=\"https://www.buymeacoffee.com/gouravmanna3\"> coffee &#9749;</a>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}